// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

// curl -H "Content-Type: application/json" -X POST -d '{"keyword":"","pageNumber":1,"tagId":-1,"columnId":94207}' "https://cloud.tencent.com/developer/api/column/getArticlesByColumnId" | jq '.list[] | {url: "https://cloud.tencent.com/developer/article/\(.articleId)", title: .title, summary: .summary}'
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"time"
)

type Article struct {
	List []struct {
		ArticleID    int           `json:"articleId"`
		UID          int           `json:"uid"`
		ColumnID     int           `json:"columnId"`
		CategoryID   int           `json:"categoryId"`
		Title        string        `json:"title"`
		Status       int           `json:"status"`
		ShowReadNum  int           `json:"showReadNum"`
		LikeNum      int           `json:"likeNum"`
		Weight       int           `json:"weight"`
		FavNum       int           `json:"favNum"`
		CommentNum   int           `json:"commentNum"`
		SourceType   int           `json:"sourceType"`
		SourceDetail []interface{} `json:"sourceDetail"`
		Channel      int           `json:"channel"`
		CreateTime   int           `json:"createTime"`
		UpdateTime   int           `json:"updateTime"`
		Summary      string        `json:"summary"`
		Pic          string        `json:"pic"`
		Author       struct {
			UID       int    `json:"uid"`
			AvatarURL string `json:"avatarUrl"`
			Nickname  string `json:"nickname"`
		} `json:"author"`
		Tags []struct {
			ID      int    `json:"id"`
			TagID   int    `json:"tagId"`
			TagName string `json:"tagName"`
		} `json:"tags"`
	} `json:"list"`
	Total int `json:"total"`
}

func (a Article) String() string {
	b, _ := json.Marshal(a)
	return string(b)
}

// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

//  curl -H "Content-Type: application/json" -X POST -d '{"keyword":"","pageNumber":1,"tagId":-1,"columnId":94207}' "https://cloud.tencent.com/developer/api/column/getArticlesByColumnId" | jq '.list[] | {url: "https://cloud.tencent.com/developer/article/\(.articleId)", title: .title, summary: .summary}'

type RequestPayload struct {
	Keyword    string `json:"keyword"`
	PageNumber int    `json:"pageNumber"`
	TagID      int    `json:"tagId"`
	ColumnID   int    `json:"columnId"`
}

func GetRSS() (*Article, error) {
	data := RequestPayload{
		Keyword:    "",
		PageNumber: 1,
		TagID:      -1,
		ColumnID:   94207,
	}
	payloadBytes, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}
	body := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("POST", "https://cloud.tencent.com/developer/api/column/getArticlesByColumnId", body)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	rspBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	article := new(Article)
	if err := json.Unmarshal(rspBody[:], article); err != nil {
		return nil, err
	}
	return article, nil
}

func main() {
	doc := ""
	needRetry := true
	for _, v := range [5]int{1, 2, 3, 4, 5} {
		if !needRetry {
			return
		}
		Article, err := GetRSS()
		if err != nil {
			needRetry = true
			log.Println("获取文章失败, 尝试重新获取:", v, err)
			time.Sleep(time.Second * 3)
			continue
		}
		// fmt.Println(Article.String())
		// {
		// 	"url": "https://cloud.tencent.com/developer/article/%s", // articleId
		// 	"title": "",
		// 	"summary": ""
		// }
		for _, article := range Article.List {
			title := article.Title
			url := fmt.Sprintf("https://cloud.tencent.com/developer/article/%v", article.ArticleID)
			summary := article.Summary
			// ts := article.CreateTime
			createTime := time.Unix(int64(article.CreateTime), 0).Format("2006-01-02 15:04:05")
			news := fmt.Sprintf("[%s](%s)\n- 发布时间: %s\n>%s\n\n", title, url, createTime, summary)
			fmt.Println(news)
			doc += news
		}
		needRetry = false
		os.WriteFile("news.md", []byte(doc), 0755)
		return

	}

}
